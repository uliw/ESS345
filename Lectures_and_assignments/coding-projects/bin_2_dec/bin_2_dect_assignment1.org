#+STARTUP: showall
#+OPTIONS: todo:nil tasks:nil tags:nil toc:nil
#+PROPERTY: header-args :eval never-export
#+EXCLUDE_TAGS: noexport
#+LATEX_HEADER: \usepackage{breakurl}
#+LATEX_HEADER: \usepackage{newuli}
#+LATEX_HEADER: \usepackage{uli-german-paragraphs}


* Assignment

For this assignment, write a python program which will prompt the user
to enter a binary number, and then convert this number into its
decimal form, and then print the result as program output. Your code
should not use  builtin conversion function, instead, the point
of this exercise is to use your own coding skills.  Your program
output should look something like this
#+BEGIN_EXAMPLE
Please enter a binary number, or stop this program with 's'

0010

Converting '0010' into decimal notation yields 2

s

Good bye
#+END_EXAMPLE

All the techniques required to solve this assignment have been
introduced previously. The challenge with this assignment is that you
have to combine several skills, which increases complexity and the
likelihood of mistakes. So the key to this exercise is good planning,
and taking it step by step. Remember, that your lecture script has an
index which will help you to locate previously worked on topics.


** Recap of essential techniques
For this coding project, we will use doc-strings and type-hinting. We used
both before, but let's consider their use before we start coding.

*** Python Doc Strings
@@latex:\index{Python!Doc Strings} \index{Doc Strings}
\index{Python!Code!Comments} \index{Comments} \index{Code!Comments}
\index{Code!Doc Strings}@@ You already encountered the hashtag sign
@@latex:\index{ hashtag!Symbol}@@, which signifies a comment in the
code (i.e., everything after the hashtag is ignored). Python provides
a second mechanism to add comments into the code, the so-called
"doc-strings". Unlike regular comments, doc-strings will be used by
the =help()= command @@latex:\index{Functions!help()}
\index{help()}@@, and they can span multiple lines. Going forward,
each of your programs (as opposed to snippets) should start with a
doc-string, which contains a short text about what the program does,
and how to use it, and who authored it. Doc-string start and end with
triple quotation marks. Doc-strings should only be used at the
beginning of a program (or function).
#+BEGIN_SRC ipython
def myfunction():
    """ This is a single line doc-string"""
    """
    This is a multiline docs string.
    
    If you want to separate a paragraph, you need to leave an empty line.
    This function does nothing
    """
    pass
#+END_SRC


*** Type hinting
@@latex:\index{Type Hinting}@@ Python is a dynamically typed language. That is,
the type of variable (int, float, string), is determined at the time
you assign it a value. This makes for fast coding, but when reading
code written by other people, it is thus often difficult to understand
what the code is doing. Python provides so called type hints, to help
with this situation. Typically, this is overkill for a short script,
but the minute you start working on larger projects or in a team, it
greatly helps clarity.
#+BEGIN_SRC ipython
a = 12
l = [1, 4, 6]
t = (4, 9, 1)
s = ""
# This should be written as
a :int   = 12
l :list  = [1, 4, 6]
t :tuple = (4, 9, 1)
s :str   = ""
#+END_SRC
Note, that python ignores the type hints, so this will not prevent you
from doing something like this:
#+BEGIN_SRC ipython
a :int   = 12
a = "ssdsd"
#+END_SRC
but your code will become more readable. Also, some automatic syntax
checkers will then flag the second line. So as a baseline, whenever
you declare a variable, use type hinting from now on.


*** Plan of attack

Now, how do we go about this? Look up the module on
problem-solving, and then follow the steps:

  1. Create a plan (best is to start with a notebook section called "Plan", and then make list for each point):
  2. Restate the problem
  3. Divide the problem. Write down each substep, even if you don't
     know yet how to implement a given step.

  4. Start with what you know (and look for analogies). Have any of
     these steps been encountered before? If so, look up what you have
     learned before (at the very least, you have seen how to ask for
     user input, and we did a module on decimal to binary conversion).

  5. Reduce the problem, in this case, write code for each sub step,
     and test the code individually, specifically implement the
     conversion as a function which you then call in the loop which
     handles the user input.
 
  6. If each of those work as expected, start combining them (use the
     submission template).

  7. Last but not least, don't get frustrated. These exercise are
     meant for you to struggle, but if after 10 minutes you are still
     lost, post your problem in the discussion board on Quercus, and
     if all else fails, talk to the instructor or TA. Asking and
     explaining to others what is not working forces you to restate
     the problem, and often leads to progress.


Once you have a working code, test that it works. Particularly boundary cases like:

  - "0"
  - "1"
  - "00"
  - "01"
  - "10"
  - "11"

next, add a section to your program doc-string which explains what
your program will not do, e.g., what will happen if you enter:
  - "-011"
  - "123"
  - "xwz"

More power to you if your program knows what to do with this, but for
this exercise, it is sufficient if you document that these cases are
not handled.

** Submission instructions and marking scheme
Please use the below template for your submission. You can copy this
notebook to your submissions folder, or create the same sections in a
new notebook. Please name your copy
"bin2dec-FirstName-LastName".

To submit your assignment, you need to download it and submit it to Quercus
in notebook and PDF format. You can delete this and the preceding paragraph
afterward.5

  - Correct notebook name: 1pt
  - Required notebook headers 1pt
  - Code planning: 1 pt per section, 2 pts if the individual code sections are present, and work as expected. 4 pts total.
  - Code:
    - Proper docstrings where appropriate 2pts (and the help function
      will display them correctly).
    - Correct variables definitions (2pt)
    - Type hinting used throughout 2pt
    - Code runs and terminates correctly: 4pts
    - Correct text output: 4pts
    - Correct conversion results: 4pts

Total = 24 pts

** Submission template

Add the usual headers here

*** Code Plan
Fill in and expand this template:
  1. Restate the problem in your own words:
  2. Enumerate the individual substeps, and create a code cell for
     each step. Use these cells to enter your actual code and to test it:
     1. Testing .....
	#+BEGIN_SRC ipython
	# your first code piece here
	#+END_SRC
     do the same for for the next sub-step(s).

** Final code
Use this template to assemble your final code into a single notebook cell
#+BEGIN_SRC ipython
""" Description:
Purpose
Example
Limitations
Author:
Date:
"""

# ----------- functions definitions  -----------------------

# ----------- main program ---------------------------------
# --- variable declarations

# --- code starts here

#+END_SRC


