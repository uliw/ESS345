#+TITLE: Jupyter Notebook Example
#+AUTHOR:Ulrich G Wortmann
#+STARTUP: showall
#+OPTIONS: todo:nil tasks:nil tags:nil toc:nil
#+PROPERTY: header-args :eval never-export
#+EXCLUDE_TAGS: noexport
#+LATEX_HEADER: \usepackage{breakurl}
#+LATEX_HEADER: \usepackage{newuli}
#+LATEX_HEADER: \usepackage{uli-german-paragraphs}
#+latex_header: \usepackage{natbib}
#+latex_header: \usepackage{natmove}

Jupyter Notebooks can run on a cloud based server, so they require no local installation. This allows us to use a single
link to create a personalized account, upload/update all teaching materials (including data), and provide a ready to run
computational environment.

The above steps were executed when you followed the link to this notebook (which runs on a cloud server provided Compute
Canada, which students can access with their UTorid without the need to create a new account.)

Jupyter notebooks allow us to mix regular text with links and graphics and executable computer code. They are thus an almost perfect vehicle for students to learn coding. E.g., you can execute the following python code by doing a left-click on this cell, and then hit-shift enter to execute the code
#+BEGIN_SRC ipython
a = 2
b = 3
c = a * b
print(c)
#+END_SRC
More importantly however, students can left click on this cell, and modify the code, which allows them to experiment in
a guided manner (position your cursor on the number 2 and change it to 4, then hit shift enter to execute the new
code). This drastically reduces the entry barriers and points of failures when introducing computing.
 
Jupyter Notebooks go however well beyond such simple examples. They provide a convenient way to exchange data, richly
annotated code, provide access to powerful server based computing, and thus are rapidly evolving to become a de-facto
standard in data analysis.

Below a short example which demonstrates how to access an excel file:
#+BEGIN_SRC ipython
# Load libbaries for plotting, and data access
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Import data from excel
fn = "EOT benthic foram.xlsx" # file name
sn = "benthic (Zachos2001)"   # sheet name

# read the excel sheet using pandas read_excel function and add it to
df = pd.read_excel(fn, sheet_name=sn) # the pandas dataframe
# show the first couple of lines 
print(df.head()) #  test whether read was succesful
#+END_SRC

now, lets get some descriptive statistics
#+BEGIN_SRC ipython
print(df.describe()) # show simple statistics
#+END_SRC

and plot our data
#+BEGIN_SRC ipython
sns.set() # set the default plot style
sns.lineplot(x="Age", y="d18O", data=df)
#+END_SRC

This small example demonstrates that tight integration between text, data and code makes computing projects considerably
more approachable. To put this into perspective, imagine what would have happened if I had asked you to install a python
IDE in your laptop, download the above code, onto your laptop, install it in the correct working directory (and do the
same for the data), and the run the code, hoping that there is no typo in your file names. Even if you are versed on
these things, it would have been quite a hassle. Instead you were up and running with your first python code in less
than 30 seconds.
 

