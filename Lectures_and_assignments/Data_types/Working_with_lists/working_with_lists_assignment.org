#+STARTUP: showall
#+OPTIONS: todo:nil tasks:nil tags:nil toc:nil
#+OPTIONS: d:(not "results")
#+PROPERTY: header-args :eval never-export
#+EXCLUDE_TAGS: noexport
#+LATEX_HEADER: \usepackage{breakurl}
#+LATEX_HEADER: \usepackage{newuli}
#+LATEX_HEADER: \usepackage{uli-german-paragraphs}

** TODO 





* Assignment

** Learning outcomes

 - know how to query object methods
 - understand the difference between object methods and functions
 - understand the difference between methods which operate on the on a
   given object *IN PLACE*, and functions which return a modified copy
   of an object

** Questions
Execute the following block so that =my_list= becomes known in your
local Jupyter session.
#+BEGIN_SRC ipython
my_list = [3, 4, 5, 12, 0, 11, 1, 2, 9, 8, 7, 13, 10]
#+END_SRC

Add here a text block where you enumerate (i.e., a numbered list) all user
visible methods of the =my_list= object which have the *IN PLACE* warning in
their help text (if in doubt, consult your working with list module on how to
find out about this). There is no need to add a code cell, just list what you find (3 pts).

Add a code block which will sort =my_list= using a python function (as
opposed to a list method). Print =my_list= to verify that it has been sorted 4 pts

Add code below which achieve the same result as the previous question,
but this time use a list method, rather than a function. 2 pts if the
result is correct, plus 2 extra points if your code reflects the
difference between in-place and copy operations
#+BEGIN_SRC ipython
my_list = [3, 4, 5, 12, 0, 11, 1, 2, 9, 8, 7, 13, 10]
#+END_SRC

Add a code block below, which displays =my_list= in reverse order
without affecting the actual ordering of =my_list= (2 pts). Add a
second line which uses a list method to order the contents of
=my_list=. (2 pts)

Execute the following statement, and add a python statement which
counts the occurrences of the number five in =long_list=). 1 pt

#+BEGIN_SRC ipython
long_list = [2, 2, 5, 5, 0, 3, 3, 4, 3, 2, 4, 2, 4, 3, 3, 4, 2, 1, 5,
             3, 0, 4, 4, 2, 4, 1, 1, 2, 1, 2, 0, 0, 0, 4, 2, 5, 5, 5, 0, 3, 4, 3,
             3, 5, 3, 5, 2, 1, 0, 3, 3, 3, 0, 2, 3, 5, 4, 4, 4, 1, 5, 5, 5, 3, 5,
             3, 0, 1, 1, 1, 4, 4, 0, 2, 2, 1, 4, 4, 3, 2, 0, 1, 1, 0, 3, 3, 0, 3,
             0, 3, 4, 2, 3, 0, 2, 3, 5, 0, 4, 5]
#+END_SRC

Write a python statement which returns the position (index) of the
first occurrence of the number three. 2 pts

Create a copy of =a= and reverse the copy, then print both variables
(see below). You results should look like the comment in the code box
below. 2 pts
#+BEGIN_SRC ipython
a = [3, 4, 5, 12]
# print(a)
# print(b)
# should result in
# 3, 4, 5, 12
# 12, 5, 4, 3
#+END_SRC

Write a python statement which adds the elements of =b= to =a= 2pts

Write a statement which removes the second occurrence of the number
twelve in =a= 2 pts

Write a statement which uses a different method than in the previous
question to remove the first occurrence of the number twelve in =a=
2 pts

Write a statement which inserts the number twelve into =a= at the same
position where you deleted it in the previous question. 2 pts

Explain the difference between =extend()= and =append()= 4 pts.

Explain in your own words what happens when you execute the following (4 pts)
#+BEGIN_SRC ipython
a = [1, 2, 3,]
a + 2 * a
#+END_SRC

Write a python statement which prints =a= in reverse order without
using a list method or function. 2pts

** Advanced question (6 pts)

Consider the following two lists:
#+BEGIN_SRC ipython
a = [1, 2, 3]
b = ['John', 'Anna', 'George']
#+END_SRC
find a python expression which combines the two list into a single
list and prints the result as =[(1, 'John'), (2, 'Anna'), (3,
'George')]= This is not in the textbook and requires that you do some
sleuthing on your own. I am looking for a solution which is a one
liner involving no more than two python function calls (excluding the
print statement). Note do not spend more than 30 minutes on this,
unless you have nothing else to do.

** Marking Scheme
Total points: 46

 - Points as listed in each question 44 pts
 - Correct naming scheme 2 pts


** Submission Instructions

#+Include: submission_instructions.org
