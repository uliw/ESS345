#+STARTUP: showall
#+OPTIONS: todo:nil tasks:nil tags:nil toc:nil
#+PROPERTY: header-args :eval never-export
#+EXCLUDE_TAGS: noexport
#+LATEX_HEADER: \usepackage{breakurl}
#+LATEX_HEADER: \usepackage{newuli}
#+LATEX_HEADER: \usepackage{uli-german-paragraphs}


* Assignment

You must copy this notebook to your submissions folder before editing
it. Otherwise, your edits may be overwritten the next time you log
into syzygy. Please name your copy
"print-function-FirstName-LastName". 

To submit your assignment, you need to download it and submit
it to Quercus. You can delete this and the preceding paragraph
afterward

*ESS345H1 Computational Geology - The Print Statement*

*Date:*

*First Name:*

*Last Name:*

*Student: Id*


All questions should be solved with the techniques introduces in the
last module.

1) Set a = to 12 and then write a python statement in such a way that
   you get the following output (1pt).
  #+BEGIN_EXAMPLE
  The value of the variable a = 12
  #+END_EXAMPLE
  Note, I don't want you to type
   a string with these words. Use an f-string and use the appropriate
   syntax so that the actual value of a is printed.

2) Using the same code as above, include linefeed statements in such a
   way that your printout is preceded and followed by an empty line (1pt).

3) Using the same code as in 2, precede and follow the empty lines
   with 40 dashes (see below). Note that rather than typing (and
   counting) use this statement ='-'*40=. Your result should look like
   this - including the empty lines. (1pt).

   #+BEGIN_EXAMPLE
   ----------------------------------------
   
   The value of the variable a = 12
   
   ----------------------------------------
  #+END_EXAMPLE

4) Modify the first and last print statement  in such a
   way that you get this (1pt)

   #+BEGIN_EXAMPLE
   *----------------------------------------*
   
   The value of the variable a = 12
   
   *----------------------------------------*
   #+END_EXAMPLE

5) Using the code in 4, add an escape sequence in front of "The
   value...", so that this line is displayed with one tab to the
   right. (1pt)
   
6) You are working on software for a point of sale system (i.e., cash
   register). Your software knows about the sales price, as well as
   how much cash you received from the customer. Write some python
   code which calculates and displays the change owed. Your display
   should read:
   #+BEGIN_EXAMPLE
   Change owed = $12.40
   #+END_EXAMPLE
   Notes: A) You code should correctly round the owed amount to the
   nearest 10 cents, and display the cents as in the above example; B)
   You should achieve this by using the appropriate format modifier
   and by making good use of the f-string. Assume that the customer
   provided you with a twenty dollar bill, and that the price was CAD
   7.63. Also, test your code with a price of $7.67. (4pts)

7) Using the example in #6: Rather than printing the change owed,
   print a proper receipt. Towards this end, add a variable which
   describes the item. Your output should look like this (note that
   the dollar signs should all be aligned -- see the pdf version if in
   doubt)

   #+BEGIN_EXAMPLE
   Cheese        $7.63
   HST           $
   -------------------
   Total         $

   Paid          $
   Change owed = $
   #+END_EXAMPLE
   Notes: This is meant to be an actual program. In other words, your code should be universal. So we do not want to write
   #+BEGIN_SRC ipython
   print(f"Cheese \t \t $7.63")
   #+END_SRC
   rather, we want to declare each value in a variable like this
   #+BEGIN_SRC ipython
   item_name = "Cheese"
   cost = 7.63
   hst = 0.13
   paid = 20
   #+END_SRC
   and than use those variables in our code. The advantage being, if
   you want to change your price or item name, you simply change the
   variable definition at the beginning of the code, rather than
   having to modify the internals of your code. This is also a good
   opportunity to test drive a dictionary. See this example
   #+BEGIN_SRC ipython
   item_name = "Cheese"
   price_list = {"Cheese": 7.63,
		 "Butter": 7.67,
		 "Really Long Pasta": 2,05
   }
   print(f"{item} \t \t ${price_list[item_name]}")
   #+END_SRC
   Try this will all 3 item names and make sure you understand what is
   happening here.  Notes: A) you first need to calculate the HST
   (13%) B) Do not forget to do the rounding and make sure that
   =total= plus =changed_owed= are equal to =paid=. In other words be
   on the lookout for rounding errors. Test this by using all 3 items
   in your dictionary C) The dollar sign of the price should be two
   tab stops to the right. The length of the item description should
   be limited in such a way that it does not displace the price. Test
   this by setting =item = "Really Long Pasta"= (5pts)

9) The two statements below are fairly similar, yet, the result of the
   print statement is rather different(execute this to see for
   yourself).

#+BEGIN_SRC ipython
a = (
    f"This is string one\n"
    f"This is string two\n"
    f"This is string three\n"
    )

b = (
    f"This is string one\n",
    f"This is string two\n",
    f"This is string three\n"
    )

print(a)
print(b)
#+END_SRC

   Explain why is this happening? Note, I am not asking that one
   expression has commas, whereas the other has not. I am asking what
   difference does the comma make? (4pts)



