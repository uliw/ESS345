* Loops
move this into the loop assignment


*** For loops without a list type object
@@latex:\index{block statements!for loop!range} \index{for loop!range()}@@
@@latex:\index{functions!range()!loop statements}@@ \index{range()!loop
statements} Let's say we want to calculate the $2^n$ for n from zero to eight. You
can go ahead and create a list with =[0,1,2,...]= but this is not really
practical for longer sequences. What we need is a way to create a list on the
fly. Python offers several ways, but here we will only use the range expression:
#+BEGIN_SRC ipython
for i in range(6):
    print(i)
#+END_SRC

#+RESULTS:
: # Out [19]: 
: # output
: 0
: 1
: 2
: 3
: 4
: 5
: 

The arguments are the same we use for slicing, start, stop, step, and
similarly, you can count backwards too
#+BEGIN_SRC ipython
for i in range(6,-1,-1):
    print(i)
#+END_SRC

#+RESULTS:
#+begin_example
# Out [20]: 
# output
6
5
4
3
2
1
0

#+end_example

back to our original problem:
#+BEGIN_SRC ipython
# This script will caculate 2^n for a sequence of numbers
start = 0 # the start value
stop  = 8 # the end value. Note, the last number in the range will be
          # stop-1. This is similar to the slicing expressions!
step  = 1 # the step size

for n in range(start,stop,step):
    r = 2**n
    message = f"2^{n} = {r}"
    print(message)
#+END_SRC

#+RESULTS:
#+begin_example
# Out [21]: 
# output
2^0 = 1
2^1 = 2
2^2 = 4
2^3 = 8
2^4 = 16
2^5 = 32
2^6 = 64
2^7 = 128

#+end_example

#+BEGIN_SRC ipython
c = 0
for i in range(0,8,2):
    print(i,c)
    c = c + 1
#+END_SRC

#+RESULTS:
:results:
# Out [6]: 
# output
0 0
2 1
4 2
6 3

:end:

