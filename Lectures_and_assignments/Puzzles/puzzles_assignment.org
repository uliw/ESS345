#+STARTUP: showall
#+OPTIONS: todo:nil tasks:nil tags:nil toc:nil
#+PROPERTY: header-args :eval never-export
#+EXCLUDE_TAGS: noexport
#+LATEX_HEADER: \usepackage{breakurl}
#+LATEX_HEADER: \usepackage{newuli}
#+LATEX_HEADER: \usepackage{uli-german-paragraphs}

   

* Assignment
Create a new notebook in your submissions folder named
"Puzzles-FirstName-LastName".  For each puzzle, create one text cell
which states the puzzle number followed by a single code cell which
produces the desired output.  To submit your assignment, you need
to download it and submit it on Quercus (please use pdf and notebook
format). Your pdf version should show the output of your code cells.

So, without further ado, lets put the above principles to work. For
the purpose of training our problem solving skills, we will reduce the
number of coding techniques, and only allow loops, counters,
conditionals and print statements.  All the below exercises require
you to create some python code which will match the output pattern
shown in the particular question. The goal is to create these patterns
with one or more loop statements (including loops which use the
range function - if in doubt, go back to the previous chapters - note,
your lecture script has an index). You are not allowed to use string
manipulation. Furthermore, *your print statements can only be
selected* *from the following three options:*
#+BEGIN_SRC ipython
print(f"X", end="") # this will print a single X without a linefeed
print(f" ", end="") # this will print a single blank space without a
                    # linefeed
print("") # this will print a linefeed
#+END_SRC
*You are not allowed to use a print statement which contains more than one
"X":*
#+BEGIN_SRC ipython
print("X")  # ok
print("XX") # not ok
#+END_SRC



 


 1. Write a program which uses only one print statement (out of the
    allowed 3) to create this output:
    #+BEGIN_EXAMPLE
    XXXXX
    #+END_EXAMPLE

    #+BEGIN_SRC ipython
    # 
    #+END_SRC
    
 2. Write a program which uses only two print statements out of the
    allowed 3) to create the output below. If you can't see the
    immediate solution go to problem #3 which is the same question but
    in even further reduced form:
    #+BEGIN_EXAMPLE
    XXXXX
    XXXXX
    XXXXX
    XXXXX
    XXXXX
    #+END_EXAMPLE

    #+BEGIN_SRC ipython
    # 
    #+END_SRC

 3. Write a program which use only two print statements (out of the
    allowed 3) to create the output below. If you can't see the
    immediate solution go to problem #2, which is the same question
    but stated more simply.
    #+BEGIN_EXAMPLE
    XXXXX
    XXXX
    XXX
    XX
    X
    #+END_EXAMPLE

    #+BEGIN_SRC ipython
    # 
    #+END_SRC
    
 4. [@4] Write a program which uses only two print statements (out of the
    allowed 3)to create the output below. Initially, this may look
    puzzling. But you probably recognize that you solved an analogous
    problem in #1. So the only problem left to solve is to find a way
    to count inside a loop first upwards to a certain number and then
    from thereon backward.
    #+BEGIN_EXAMPLE
    X
    XX
    XXX
    XXXX
    XXX
    XX
    X
    #+END_EXAMPLE

    #+BEGIN_SRC ipython
    # 
    #+END_SRC
 
 5. [@5] Write a program which uses no more than the three print statements
    mentioned above (i.e., "X", ," ", and the linefeed to create the
    following pattern
    #+BEGIN_EXAMPLE
    XXXXX
     XXX
      X
    #+END_EXAMPLE

    #+BEGIN_SRC ipython
    # 
    #+END_SRC
    
   
 6. [@6] Similar to 5, write a program which creates the following pattern
    #+BEGIN_EXAMPLE
     X
    XXX
   XXXXX
    XXX
     X
   #+END_EXAMPLE

   #+BEGIN_SRC ipython
   # 
   #+END_SRC

 7. [@7] Similar to 6, write a program which creates the following
    pattern. Your code can contain up to five print statements. Think
    of it as a puzzle involving loops and counters. While it looks
    complicated at first, try and decompose it into pieces you have
    solved before (in fact, most of the code for this piece has been
    used before). Once you have some ideas, create a game plan, and
    solve it step by step (say start with the left side of the
    figure...).
    #+BEGIN_EXAMPLE
    X            X 
     XX        XX
      XXX    XXX
       XXXXXXXX
       XXXXXXXX
      XXX    XXX
     XX        XX
    X            X
    #+END_EXAMPLE



** Marking Scheme

- Proper file name for your submission files 2pts
- All needed headers in your submission files 2pts
- 1 pts for correct and use of type hinting (7 pts)
- 2 pts for each solution which follows the rules, and produces the
  requested output. 1pt for each solution, which is at least 50% correct. (14 pt)
- Total points = 25 pts.



