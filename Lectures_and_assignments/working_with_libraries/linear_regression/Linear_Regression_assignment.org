#+STARTUP: showall
#+OPTIONS: todo:nil tasks:nil tags:nil toc:nil
#+PROPERTY: header-args :eval never-export
#+PROPERTY: header-args :results output pp replace
#+EXCLUDE_TAGS: noexport
#+LATEX_HEADER: \usepackage{breakurl}
#+LATEX_HEADER: \usepackage{newuli}
#+LATEX_HEADER: \usepackage{uli-german-paragraphs}


* Assignment
  
Notes: Create a notebook in your submissions folder with this name:
"linear-regression-FirstName-LastName". In order to submit your
assignment, you need to download it and submit it on Quercus (ipynb
and pdf format). Please have the usual header with date, name
etc. Don't forget to copy all data files into your submission folder,
otherwise the assignments won't work.

Make sure that your pdf file is complete and shows all output from
your code cells
 
Marking Scheme: 1 pt per question. It is either right or wrong. No
half points. (8 Points total)

All exercises:
  - use self contained code
  - use 5x4 inch plot size
  - use the darkgrid scheme
  - use the object oriented interface to matplotlib

Here you go:

  1) Use =alpha_versus_depth.csv= to create a scatter plot where
     =mbsl= is on the X-axis, and =alpha [permil]= is plotted on the
     Y-axis. Alpha is the fractionation factor which describes the
     percentage of \nbsp^{32}S isotopes being chosen over the \nbsp^{34}S isotopes
     during microbial sulfate reduction. This quantity is denoted by
     the Greek letter \alpha and is expressed in \permil. You can create the
     permil sign for your axis label as =$^0/_{00}$=.  =mbsl= stands
     for meters below sea-level with a unit of meters. In this case
     its expresses the distance from the water surface to the sediment
     surface (microbial sulfate reduction only occurs in anoxic
     sediments). Note, this data is heavily edited, and should not be
     used to draw scientific conclusions! Plot axis must show labels
     with units. All units must be given in square brackets, e.g.,
     =mbsl [m]=.
  2) Use a histogram to test whether depth and alpha show a normal
     distribution. Discuss your findings
  3) Perform a regression analysis of this data-set where the
     fractionation factor \alpha is the dependent variable, and water depth
     is the independent variable.
  4) Extract the regression parameters, and use the results to create
     a single multi line f-string which shows the regression
     parameters as seen in the previous chapter. Use the =text()=
     method of the plot handle to place this string in the upper left
     corner of the plot.
  5) Using the predict method of your model result, generate a new set
     of predicted y-values which you then plot as a regression line on
     top of your scatterplot.
  6) Discuss the statistical relevance of your analysis.
  7) Using the code below, create a dataset with a known linear
     relationship, then add some noise to it, and then analyze the
     noisy data and compare it to the actual data. Plot the results of
     this experiment similar to #6. Plot the original data (i.e.,
     without the noise) as a blue line, the data with the noise as a
     scatter plot, and the results of your regression analysis as an
     orange line.

     #+BEGIN_SRC ipython
     # here we use the nump library. We will dicuss it's use in greater
     # detail in the next module
     import numpy as np
     import pandas as pd
     import statsmodels.formula.api as smf
     from typing import TypeVar

     # here is another method how  you can use type hints with libabries
     # which do not provide native type hinting support. Feel free to use this
     # approach, or keep with the one from previous chapters (which I like bettter).

     smm = TypeVar('statsmodels.regression.linear_model.OLS')
     smr = TypeVar('statsmodels.regression.linear_model.RegressionResultsWrapper')

     # create 30 values between 0 and 30 with a stepsize of 1
     x0 :np.ndarray =  np.arange(0, 30, 1) # this is the independent variable

     # calcualte y-values based on x0
     y0 :np.ndarray =  12.1 + 0.23 * x0

     # create some random noise which varies between -3 and 3
     noise :np.ndarray = (np.random.uniform(-3,3,size=30))

     # and add it to the dataset
     yn :np.ndarray = y0 + noise

     # create a dataframe
     df :pd.DataFrame = pd.DataFrame({'X':x0,'Y':yn})

     # create a regression model
     model :smm = smf.ols(formula="yn ~ x0",data=df)
     results :smr = model.fit()
     #+END_SRC

    

Last but not least:
 
     
  8) [@8] Rerun the code in #8 but this time, instead of using 30 data
     points, use only 10, and provide figure
  9) Then rerun it with 100 data points. Provide figure
  10) Summarize your findings in your own words.
     

