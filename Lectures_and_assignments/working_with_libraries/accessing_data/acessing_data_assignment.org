#+STARTUP: showall
#+OPTIONS: todo:nil tasks:nil tags:nil toc:nil
#+PROPERTY: header-args :eval never-export
#+PROPERTY: header-args :results output pp replace
#+EXCLUDE_TAGS: noexport
#+LATEX_HEADER: \usepackage{breakurl}
#+LATEX_HEADER: \usepackage{newuli}
#+LATEX_HEADER: \usepackage{uli-german-paragraphs}


** Assignment
In the following exercises, we will practice some of the
above. However, some tasks have not yet been explained. Particularly,
how to create a dataframe from a list, or a dictionary. By now, you
know enough python to read online materials and search for solutions
to a given problem on your own. So the point of this assignment is to
practice working with the dataframe object, and to expand your agency
to deal with problems which are not part of the course script.  I
recommend to refer to the following sources

  - [[https://www.tutorialspoint.com/python_pandas/python_pandas_dataframe.htm][https://www.tutorialspoint.com/pandas-dataframe]]
  - [[https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html][https://pandas.pydata.org/indexing]]
  - [[https://towardsdatascience.com/how-to-read-csv-file-using-pandas-ab1f5e7e7b58][howto-read-csv-with-pandas]]
  - [[https://towardsdatascience.com/how-to-export-pandas-dataframe-to-csv-2038e43d9c03][pandas csv export]]


*** Submission instructions

   1. Create a notebook ino your submissions folder with this name:
      "pandas-dataframe-FirstName-LastName". In order to submit your
      assignment, you need to download it and submit it on Quercus
      (ipynb and pdf format).  Please have the usual header with date,
      name etc. (Do not forget to copy all datafile to your submission
      folder as well).
   
   2. All questions should be solved with pandas methods. You may have
      to look up syntax or options either through the help system, or
      by using the above links.
   
   3. Marking Scheme (per question):
     - All variables declared and type hinting used throughout 1pt. No partial marks
     - Code produces correct output 2pts. 1pt if code is sort of
       correct
     - Proper use of comments 1pt. There is no need for doc-strings
       though
     - Code is self contained 1pt. Use first example code in the
       "Using pandas to read data from an excel file" chapter, as a
       template.
     - Max points per question: 5pts for a total of 14*5 = 70 pts
     

For each answer, please write self contained code, that is, it imports
all libraries, declares all variables, imports all data etc., rather
then writing code which relies on data imported in a previous
cell. Cut copy paste is your friend here.

  1) Write a code block which will import the =outside_peak= sheet
     from =Yao_2018.xlsx= into a dataframe. Using the =tail= method
     display the last 7 rows of this dataframe.
  
  2) As above, but this time use the =iloc= method to display the 9^{th} 
     row of the dataframe.
  3) As above, but this time use the =iloc= method to display the last
     4 values in the third data-column (not index!) of the dataframe.

  4) As above, but this time use the =loc= method to display the last
     4 values in the third data column of the dataframe.

  5) Use a pandas dataframe method to save your data frame as a Comma
     Separated Textfile (CSV) into your local working directory. Your
     Jupyter notebook can open CSV files, so please go and check if
     the dataframe has been saved correctly.

  6) Import the =cars.csv= into a dataframe, using the license plate
     as index. Add a head statement to show the success of your code

  7) As above, but this time use the =iloc= method to display the
     second row of the dataframe.

  8) As above, but this time use the =iloc= method to display the
     second data-column of the dataframe.

  9) As above, but this time use the =loc= method to display the
     second row of the dataframe.

  10) As above, but this time use the =loc= method to display the
      second data-column of the dataframe.

** Joining dataframes

  11) [@11] Create a two new dataframes from the following lists, and
      then use the pandas =concat()= method to join both dataframes
      into a new frame so that each row contains the name in the first
      column and the age in the second column.
      
      #+BEGIN_SRC ipython
      import pandas as pd 
      names :list = ['Paul', 'Peter', 'Hook', 'Wendy']
      ages  :list = [ 12, 14, 51, 13]
      #+END_SRC


  12) [@12] As above, but this time we join them along the column. So
      you get only one column, where the first 4 elements are the
      name, and the next 4 elements are the ages.

  13) [@13] Here, I create a list of tuples from two regular lists with the
      help of the zip function. Create a new dataframe from the list
      of tuples called =names_and_ages=. Feel free to ignore the part
      where I construct the list of tuples.

  #+BEGIN_SRC ipython
# first we do some magic to create a list of tuples
# no need to understand this in detail, but if you get it
# it is a neat trick
names :list = ['Paul', 'Peter', 'Hook', 'Wendy']
ages  :list = [ 12, 14, 51, 13]
# zip(per) two lists int a list of tuples
names_and_ages :list = list(zip(names,ages))
print(names_and_ages)
#+END_SRC

  
   14) [@14] As above, but this time include proper column headers

