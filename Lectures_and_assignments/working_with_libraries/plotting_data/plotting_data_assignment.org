#+STARTUP: showall
#+OPTIONS: todo:nil tasks:nil tags:nil toc:nil
#+PROPERTY: header-args :eval never-export
#+PROPERTY: header-args :results output pp replace
#+EXCLUDE_TAGS: noexport
#+LATEX_HEADER: \usepackage{breakurl}
#+LATEX_HEADER: \usepackage{newuli}
#+LATEX_HEADER: \usepackage{uli-german-paragraphs}


* Assignment

Notes: 
   - Create a notebook in your submissions folder with this name:
     "plotting-data-FirstName-LastName". In order to submit your
     assignment, you need to download it and submit it on Quercus
     (ipynb and pdf format). Please have the usual header with date, name
     etc.

   - for some of the tasks, you need to lookup documentation on the
     internet. Remember to use the object oriented matplotlib
     interface

   - Make sure that your pdf file is complete and shows all output
     from your code cells
 
   - Marking Scheme (per question):

     - All variables declared and type hinting used throughout 1pt.
     - Code produces correct output 2pt.
     - Code is self contained 1pt.
     - graphical output is correctly formatted (see the list below) 2pts
     - Total number of points: 7 * 5 = 35pts

All exercises:
  - use self contained code
  - use 6x4 inch plot size
  - use the darkgrid scheme
  - use the object oriented interface to matplotlib.pyplot


Unless specified otherwise, all assignments should use the following
data. It is ok to generate these once at the beginning of your notebook
#+BEGIN_SRC ipython
import numpy as np
import math

# generate a numpy array filled with values from
# zero to 2*pi with a step size of 0.1
x_1 :float = np.arange(0, math.pi*2, 0.1)
y_1 :float = np.sin(x_1)         # calculate the sin(x)
y_2 :float = np.cos(x_1)         # calculate the cos(x)
y_3 :float = np.cos(x_1 * 2) + 2 # calculate the cos(x*2)+2
y_4 :float = y_3 + + y_2 + y_1   # calcualte the sum y1 to y3
#+END_SRC


Tasks:

  1. Create a plot with x_1 and y_1 using matplotlib
  2. Create a plot with x_1 and y_1 but this time you annotate the x and y axes with =X= and =Y=
  3. As in 2, but this time add a legend which shows $y = \sin(x)$ for
     $x=0$ to $x=2*\pi$. The legend should show the appropriate math
     symbols.
  4. As in 3, but this time add y_4 as second dataset. The legend for
     y_4 should show the correct equation for y_4 (i.e., not y_1+Y_2+y_3!).
  5. As in 3, but this time add the second dataset to its own
     plot. Arrange the plots in an array with one column and two rows,
     with an image size of 5 by 8 inches. Rather then using a legend,
     add a title to each subplot with the legend text (e.g., $y =
     \sin(x)$ for $x=0$ to $x=2*\pi$). Also, add a title for the figure
     (not the plot!). You can use the subtitle method of the figure
     object.
  6. As in #3, but now show that data as lineplot and overlay the
     actual x/y pairs as a scatterplot
  7. As in #6, but this time the color of the line should be different
     from the scatter marker, and width of the line should be 4
     pixels. Take care that the scatter markers are place on top of
     the line.

